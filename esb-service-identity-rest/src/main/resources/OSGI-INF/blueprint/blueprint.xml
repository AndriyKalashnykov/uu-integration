<?xml version="1.0" encoding="UTF-8"?>

<blueprint default-activation="eager"
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
	xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.1.0"
        xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
			    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
			    http://aries.apache.org/xmlns/jpa/v1.1.0
			    http://aries.apache.org/schemas/jpa/jpa_110.xsd">

	<cm:property-placeholder persistent-id="se.uu.its.integration.amq">
		<cm:default-properties>
			<cm:property name="amq.url" value="tcp://localhost:61616" />
			<cm:property name="amq.deadletterUrl" value="tcp://localhost:61617" />
			<cm:property name="amq.user" value="smx" />
			<cm:property name="amq.pw" value="smx" />
		</cm:default-properties>
	</cm:property-placeholder>

	<cm:property-placeholder persistent-id="se.uu.its.integration.esb-service-identity-rest" placeholder-prefix="$(" placeholder-suffix=")">
		<cm:default-properties>
			<cm:property name="id.CXFserver" value="http://0.0.0.0:8989/" />
			<cm:property name="id.service" value="esb/rest" />
		</cm:default-properties>
	</cm:property-placeholder>

	<!-- This is the CXF-based front for the route. -->
	<cxf:rsServer id="rsServer" address="$(id.CXFserver)$(id.service)"
		serviceClass="se.uu.its.integration.service.identity.rest.IdentityService"
		loggingFeatureEnabled="true" loggingSizeLimit="20" />

	<!-- References must be assigned local identifiers. -->
	<reference id="entityManagerFactory" interface="javax.persistence.EntityManagerFactory" />
	<reference id="platformTxManager" interface="org.springframework.transaction.PlatformTransactionManager" />
	<reference id="transactionManager" interface="javax.transaction.TransactionManager" />
	<reference id="recoverableTxManager" interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager" />
	<reference id="datasource" interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=jdbc/UUDS)" />

	<!-- Setting up the amq:// components with a configuration that points to
		the JcaPooledConnectionFactory and the global Spring PlatformTransactiongManager.
		Note that transacted is set to 'false' because it's the JTA TransactionManager
		that manages the transactions and not the JMS component itself. -->
	<bean id="amq" class="org.apache.camel.component.jms.JmsComponent">
		<property name="configuration" ref="AMQConfig" />
	</bean>

	<bean id="AMQConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="XAPooledCF" />
		<property name="transacted" value="false" />
		<property name="transactionManager" ref="platformTxManager" />
		<property name="maxConcurrentConsumers" value="1" />
		<property name="cacheLevelName" value="CACHE_NONE" />
	</bean>

	<!-- The JcaPooledConnectionFactory ensures that the JMS Sessions get enlisted
		in the global transaction manager -->
	<bean id="XAPooledCF" class="org.apache.activemq.pool.JcaPooledConnectionFactory" init-method="start" destroy-method="stop">
		<property name="name" value="activemq.default" />
		<property name="maxConnections" value="1" />
		<property name="connectionFactory" ref="AmqXaCF" />
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- Defines an ActiveMQ XA-aware ConnectionFactory -->
	<bean id="AmqXaCF" class="org.apache.activemq.ActiveMQXAConnectionFactory">
		<property name="brokerURL" value="failover:(${amq.url})?jms.prefetchPolicy.all=1" />
		<property name="userName" value="${amq.user}" />
		<property name="password" value="${amq.pw}" />
	</bean>

	<!-- A ResourceManager is needed for every transactional resource in order
		to recover any outstanding transactions after a crash. It will register with
		the Aries transaction manager, which then calls recoverResource() on the
		transactional resource itself. -->
	<bean id="resourceManager-AMQ" class="org.apache.activemq.pool.ActiveMQResourceManager" init-method="recoverResource">
		<property name="transactionManager" ref="recoverableTxManager" />
		<!-- CF must be of type ActiveMQConnectionFactory, otherwise no recovery will occur -->
		<property name="connectionFactory" ref="AmqXaCF" />
		<property name="resourceName" value="activemq.default" />
		<property name="userName" value="${amq.user}" />
		<property name="password" value="${amq.pw}" />
	</bean>

	<bean id="modelUtils" class="se.uu.its.integration.model.common.ModelUtils" />
	<bean id="esbEventLogger" class="se.uu.its.integration.esb.logger.ESBEventLogger" />

	<!-- Apache Camel JPA Component configuration. -->
	<bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="transactionManager" ref="platformTxManager" />
	</bean>

	<!-- JPA idempotent Camel component configured with Hibernate and JTA - ->
	<bean id="messageIdRepo" class="org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository">
		<argument index="0" ref="entityManagerFactory"/>
		<argument index="1" ref="jtaTransactionTemplate" />
		<argument index="2" value="Identity"/>
	</bean>
	-->

	<!-- Idempotent Camel component configured with JDVC and an XA datasource -->
	<bean id="messageIdRepo" class="org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository">
		<argument index="0" ref="datasource"/>
		<argument index="1" ref="jtaTransactionTemplate" />
		<argument index="2" value="Identity"/>
	</bean>

	<!-- Transaction used in route. -->
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>

	<!-- Transaction template for JTA. -->
	<bean id="jtaTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehavior" value="0" />
	</bean>

	<!-- We us a separate broker for dead letters since we need to exclude queue from XA-transactions. -->
	<bean id="amq-dead-letter" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="${amq.deadletterUrl}" />
		<property name="userName" value="${amq.user}" />
		<property name="password" value="${amq.pw}" />
 	</bean>

	<!-- Used for testing: <throwException ref="forced" />
	<bean id="forced" class="java.lang.RuntimeException" />
	-->

	<!--
		Enable logging in Karaf with:
			log:set DEBUG org.apache.activemq.transaction
			log:set DEBUG org.springframework.transaction
			log:set DEBUG org.springframework.jms.connection.JmsTransactionManager
			log:set DEBUG org.springframework.orm.jpa.JpaTransactionManager
			log:set TRACE org.apache.geronimo.transaction.manager.WrapperNamedXAResource
			log:set DEBUG org.apache.geronimo.transaction.log
			log:set DEBUG org.jencks
	-->

	<camelContext id="IdentityService"
		allowUseOriginalMessage="false"
		xmlns="http://camel.apache.org/schema/blueprint"
		xmlns:uuie="http://www.uu.se/schemas/integration/2015/Events">

		<onException id="GeneralRouteException" useOriginalMessage="true">

			<exception>java.lang.RuntimeException</exception>

			<handled>
				<constant>true</constant>
			</handled>

			<inOnly uri="amq-dead-letter:queue:identity-event-deadletter" />

			<convertBodyTo type="java.lang.String" />
			<!-- 400 Producer error: 406 not acceptable otherwise 500
						TODO: Flytta till utility-paket.
			-->
			<to id="Log event" uri="bean:esbEventLogger?method=getErrorResponse" />

			<rollback markRollbackOnly="true" />

			<stop id="Error handling finished" />

		</onException>

		<route id="IdentityServiceRoute">

			<description>
				This is the REST-endpoint for messages in the identity event domain.
			</description>

			<!-- Listen for calls from REST-binded CXF-service. -->
			<from id="Identity REST endpoint" uri="cxfrs:bean:rsServer?bindingStyle=SimpleConsumer" />

			<transacted ref="PROPAGATION_REQUIRED" />

			<!-- We use XML as internal integration language. -->
			<marshal id="XML translation">
				<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
			</marshal>

			<!-- Message identifier extracted form message and put in header. -->
			<setHeader headerName="MessageId">
				<xpath resultType="java.lang.String">concat(/*/uuie:Producer/text(), "/" , /*/uuie:ProducerReferenceId/text())</xpath>
			</setHeader>

			<!-- Add integration event id -->
			<to id="Event id assignment" uri="bean:modelUtils?method=addIntegrationEventIdToEvent" />

			<!-- Moved to bean cause camel cant load resource from other bundle.
			TODO: Fix. <Export-Package> in pom?
			<setHeader headerName="uid">
				<method bean="modelUtils" method="getNewEventId"/>
			</setHeader>
			<to uri="xslt:addIntegrationEventIdToEvent.xsl"/>
			<to uri="xslt:se/uu/its/integration/model/transform/addIntegrationEventIdToEvent.xsl"/> -->

			<!-- Don't process already processed events. -->
			<idempotentConsumer messageIdRepositoryRef="messageIdRepo" skipDuplicate="false">

				<!-- Identifier for idempotence. -->
				<header>MessageId</header>

				<!-- Filter duplicate messages. -->
				<filter>
					<!-- Filter react on duplicate messages, property is set on the Exchange -->
					<exchangeProperty>CamelDuplicateMessage</exchangeProperty>
					<inOnly id="Log duplicate event" uri="activemq:queue:identity-event-duplicate" />
					<stop id="Duplicate message handling finished" />
				</filter>

 				<inOnly id="Event distribution" uri="amq:queue:identity-event-distribution" />

				<unmarshal id="Object translation again">
					<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
				</unmarshal>

				<to id="Convert to UUEvent" uri="bean:modelUtils?method=convertToUUEvent" />
				<to id="Log processed events" uri="jpa:se.uu.its.integration.model.events.UUEvent?persistenceUnit=logDb" />

				<marshal id="XML translation again">
					<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
				</marshal>

				<!-- TODO: Här loggar vi just nu ingenting, bara skapar responsen. Flytta till utility-paket. -->
				<to id="Log event" uri="bean:esbEventLogger?method=logEvent" />

				<setHeader headerName="CamelHttpResponseCode"><simple>202</simple></setHeader>

				<stop id="Event processing finished" />

			</idempotentConsumer>

		</route>

	</camelContext>

</blueprint>
