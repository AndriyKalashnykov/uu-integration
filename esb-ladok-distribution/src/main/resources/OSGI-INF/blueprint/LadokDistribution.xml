<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<reference id="ladokUiClient"
		interface="se.sunet.ati.ladok.rest.services.Utbildningsinformation"
		filter="(osgi.jndi.service.name=ladok/UI)" />

	<camelContext id="LadokDistribution"
		xmlns="http://camel.apache.org/schema/blueprint" xmlns:ki="http://schemas.ladok.se/kataloginformation"
		xmlns:sd="http://schemas.ladok.se/studiedeltagande" xmlns:ui="http://schemas.ladok.se/utbildningsinformation"
		xmlns:atom="http://www.w3.org/2005/Atom">

		<route id="LadokDistribution">

			<description>This route distribute Ladok events to target queues.</description>

			<!-- Get the event as raw transport packed events from the distribution 
				queue. -->
			<from uri="activemq:queue:ladok-distribution" />

			<log message="Distributing messages from new Ladok." loggingLevel="INFO" logName="se.uu.its.integration.ladok.distribution"/>

			<!-- TODO: transacted -->

			<!-- Filter and distribute the messages to the subscribers. -->
			<multicast id="Process all messages everywhere" stopOnException="true">

				<!-- Pipeline for KurstillfalleTillStatusHandelse where status = 3 ("Komplett") 
					to new group request. -->
				<pipeline id="New group request">
					<filter id="New group based on published course occation">
						<xpath>/ui:KurstillfalleTillStatusHandelse and /ui:KurstillfalleTillStatusHandelse/ui:Status/text() = '3'</xpath>
						<log message="New group based on published course occation." loggingLevel="INFO" logName="se.uu.its.integration.ladok.distribution"/>

						<to id="Transforming into ESB internal format"
							uri="xslt:se/uu/its/integration/model/transform/kurstillfalleStatusHandelseToGroupCreateRequestEvent.xsl" />

						<to uri="activemq:queue:group-distribution" />
					</filter>
				</pipeline>

				<!-- Pipeline for ForvantatDeltagandeSkapadHandelse to new group membership request. ). -->
				<pipeline id="New group membership request">
					<filter id="New group membershiop based on admission">
						<xpath>/sd:ForvantatDeltagandeSkapadHandelse</xpath>

						<!-- Extract UID for use of selection of code. -->
						<setHeader headerName="utbildningsfillfalleUID">
							<xpath>/sd:ForvantatDeltagandeSkapadHandelse/sd:UtbildningstillfalleUID/text()</xpath>
						</setHeader>

						<log message="Kurstillfalleskod $simple{header.utbildningsfillfalleUID}" loggingLevel="INFO" logName="se.uu.its.integration.ladok.distribution"/>

						<!-- We need more information. Enriching through transformation. -->
						<setHeader headerName="kurstillfalleKod">
							<simple>${bean:ladokUiClient?method=hamtaUtbildningstillfalleViaUtbildningsUtbildningstillfalleUID(${header.utbildningsfillfalleUID}).getTillfalleskod()}</simple>
						</setHeader>

						<log message="kurstillfalleKod: $simple{header.kurstillfalleKod}" loggingLevel="INFO" logName="se.uu.its.integration.ladok.distribution"/>

						<!-- Extract student UID for use of selection of code. -->
						<setHeader headerName="studentUID">
							<xpath>/sd:ForvantatDeltagandeSkapadHandelse/sd:StudentUID/text()</xpath>
						</setHeader>

						<!-- Extract student identifier for use of selection of code. -->
						<setHeader headerName="studentId">
							<!-- TODO: Get local UU-identifier from AKKA. -->
							<constant>marja992</constant>
						</setHeader>

						<log message="studentId: $simple{header.studentId}" loggingLevel="INFO" logName="se.uu.its.integration.ladok.distribution"/>

<setHeader headerName="myParam"><constant>42</constant></setHeader>

						<to id="Transforming into ESB internal format"
							uri="xslt:se/uu/its/integration/model/transform/forvantatDeltagandeSkapadHandelseToGroupMembershipCreateRequestEvent.xsl" />

						<to uri="activemq:queue:group-distribution" />
					</filter>
				</pipeline>

			</multicast>

		</route>

	</camelContext>

</blueprint>
