<?xml version="1.0" encoding="UTF-8"?>

<blueprint default-activation="eager"
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
	xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.1.0"
        xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
			    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
			    http://aries.apache.org/xmlns/jpa/v1.1.0
			    http://aries.apache.org/schemas/jpa/jpa_110.xsd">

	<cm:property-placeholder persistent-id="se.uu.its.integration.esb-service-rest-rest" placeholder-prefix="$(" placeholder-suffix=")">
		<cm:default-properties>
			<cm:property name="group.CXFserver" value="http://0.0.0.0:8989/" />
			<cm:property name="group.service" value="esb/rest" />
		</cm:default-properties>
	</cm:property-placeholder>

	<!-- This is the CXF-based front for the route. -->
	<cxf:rsServer id="rsServer" address="$(group.CXFserver)$(group.service)"
		serviceClass="se.uu.its.integration.service.group.rest.GroupService"
		loggingFeatureEnabled="true" loggingSizeLimit="20" />

	<!-- References must be assigned local identifiers. -->
	<reference id="entityManagerFactory" interface="javax.persistence.EntityManagerFactory" />
	<reference id="platformTxManager" interface="org.springframework.transaction.PlatformTransactionManager" />
	<reference id="messageIdRepoDs" interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=jdbc/UUDS)" />
	<reference id="amqxa" interface="org.apache.camel.component.jms.JmsComponent" ext:proxy-method='classes' filter="(osgi.jndi.service.name=amq/XA)" />
	<reference id="amqdlq" interface="org.apache.camel.component.jms.JmsComponent" ext:proxy-method='classes' filter="(osgi.jndi.service.name=amq/DLQ)" />

	<bean id="modelUtils" class="se.uu.its.integration.model.common.ModelUtils" />

	<!-- Apache Camel JPA Component configuration. -->
	<bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="transactionManager" ref="platformTxManager" />
	</bean>

	<!-- JPA idempotent Camel component configured with Hibernate and JTA - ->
	<bean id="messageIdRepo" class="org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository">
		<argument index="0" ref="entityManagerFactory"/>
		<argument index="1" ref="jtaTransactionTemplate" />
		<argument index="2" value="Identity"/>
	</bean>
	-->

	<!-- Idempotent Camel component configured with JDVC and an XA datasource -->
	<bean id="messageIdRepo" class="org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository">
		<argument index="0" ref="messageIdRepoDs"/>
		<argument index="1" ref="jtaTransactionTemplate" />
		<argument index="2" value="Identity"/>
	</bean>

	<!-- Transaction used in route. -->
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>

	<!-- Transaction template for JTA. -->
	<bean id="jtaTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehavior" value="0" />
	</bean>

	<!-- Used for testing: <throwException ref="forced" />
	<bean id="forced" class="java.lang.RuntimeException" />
	<bean id="nullException" class="java.lang.NullPointerException" />
	-->

	<!--
		Enable logging in Karaf with:
			log:set DEBUG org.apache.activemq.transaction
			log:set DEBUG org.springframework.transaction
			log:set DEBUG org.springframework.jms.connection.JmsTransactionManager
			log:set DEBUG org.springframework.orm.jpa.JpaTransactionManager
			log:set TRACE org.apache.geronimo.transaction.manager.WrapperNamedXAResource
			log:set DEBUG org.apache.geronimo.transaction.log
			log:set DEBUG org.jencks
	-->

	<camelContext id="GroupService"
		allowUseOriginalMessage="false"
		xmlns="http://camel.apache.org/schema/blueprint"
		xmlns:uuie="http://www.uu.se/schemas/integration/2015/Events">
<!-- 
		<onException id="GeneralRouteException" useOriginalMessage="true">

			<exception>java.lang.RuntimeException</exception>

			<handled>
				<constant>true</constant>
			</handled>

			<log message="Test-2015-11-09: Failed handling message '$simple{body}' due to $simple{exception} $simple{exception.message}" loggingLevel="ERROR" logName="se.uu.its.integration.service.group"/>

			<inOnly id="Post to dead letter queue" uri="amqdlq:queue:group-event-deadletter" />

			<convertBodyTo type="java.lang.String" />
			<!- - 400 Producer error: 406 not acceptable otherwise 500
						TODO: Flytta till utility-paket.
			- ->
			<setHeader headerName="Content-Type"><simple>application/xml</simple></setHeader>
			<setHeader headerName="CamelHttpResponseCode"><simple>500</simple></setHeader>

			<rollback markRollbackOnly="true" />

			<stop id="Error handling finished" />

		</onException>
 -->
		<route id="GroupServiceRoute">

			<description>
				This is the REST-endpoint for messages in the group event domain.
			</description>

			<!-- Listen for calls from REST-binded CXF-service. -->
			<from id="Group REST endpoint" uri="cxfrs:bean:rsServer?bindingStyle=SimpleConsumer" />

			<transacted ref="PROPAGATION_REQUIRED" />

			<!-- We use XML as internal integration language. -->
			<marshal id="XML translation">
				<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
			</marshal>

			<!-- Message identifier extracted form message and put in header. -->

			<setHeader headerName="Producer">
				<xpath resultType="java.lang.String">/*/uuie:Producer/text()</xpath>
			</setHeader>

			<setHeader headerName="ProducerReferenceId">
				<xpath resultType="java.lang.String">/*/uuie:ProducerReferenceId/text()</xpath>
			</setHeader>

			<setHeader headerName="MessageId">
				<simple>${headers.Producer}/${headers.ProducerReferenceId}</simple>
				<!-- <xpath resultType="java.lang.String">concat(/*/uuie:Producer/text(), "/" , /*/uuie:ProducerReferenceId/text())</xpath> -->
			</setHeader>

			<log message="Test-2015-11-09: Receiving message $simple{header.MessageId}" loggingLevel="DEBUG" logName="se.uu.its.integration.service.group"/>

			<!-- Moved to bean cause camel cant load resource from other bundle.
			TODO: Fix. <Export-Package> in pom?
			<setHeader headerName="uid">
				<method bean="modelUtils" method="getNewEventId"/>
			</setHeader>
			<to uri="xslt:addIntegrationEventIdToEvent.xsl"/>
			<to uri="xslt:se/uu/its/integration/model/transform/addIntegrationEventIdToEvent.xsl"/> -->

			<!-- Don't process already processed events. -->
			<idempotentConsumer messageIdRepositoryRef="messageIdRepo" skipDuplicate="false">

				<!-- Identifier for idempotency. -->
				<header>MessageId</header>

				<!-- Filter duplicate messages. -->
				<filter>
					<!-- Filter react on duplicate messages, property is set on the Exchange -->
					<property>CamelDuplicateMessage</property>
					<!-- property will be replaced with exchangeProperty in sxm 6:
					<exchangeProperty>CamelDuplicateMessage</exchangeProperty>
					-->

					<!--
					TODO: Add existing IntegrationEventId to event
					<to uri="sql:select identifier from uuevent where producer = :?Producer and producerReferenceIdid = :?ProducerReferenceId)?dataSource=messageIdRepoDs&amp;outputType=SelectOne&amp;useHeadersAsParameters=true&amp;outputType=IntegrationEventId"/>
					<to id="Existing event id assignment" uri="bean:modelUtils?method=addExistingIntegrationEventIdToEvent" />
					-->

					<inOnly id="Log duplicate event" uri="amqxa:queue:group-event-duplicate" />
					<stop id="Duplicate message handling finished" />
				</filter>

				<!-- Add integration event id -->
				<to id="Event id assignment" uri="bean:modelUtils?method=addIntegrationEventIdToEvent" />

 				<inOnly id="Event distribution" uri="amqxa:queue:group-distribution" />

				<unmarshal id="Object translation again">
					<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
				</unmarshal>

				<wireTap id="Save message to log db" uri="jpa:se.uu.its.integration.model.events.UUEvent?persistenceUnit=logDb">
				    <body><simple>${bean:modelUtils?method=convertToUUEvent}</simple></body>
				</wireTap>

				<marshal id="XML translation again">
					<jaxb prettyPrint="true" contextPath="se.uu.its.integration.model.events" />
				</marshal>

				<setHeader headerName="Content-Type"><simple>application/xml</simple></setHeader>
				<setHeader headerName="CamelHttpResponseCode"><simple>202</simple></setHeader>

				<stop id="Event processing finished" />

			</idempotentConsumer>

		</route>

	</camelContext>

</blueprint>
